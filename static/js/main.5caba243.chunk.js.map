{"version":3,"sources":["App.module.scss","components/input/Input.module.scss","components/inputs/Inputs.module.scss","services/data.ts","services/unitConversion.ts","components/input/Input.tsx","components/inputs/Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","data","Length","unitsToLabels","km","m","cm","mm","μm","conversionFunctions","num","formulas","Mass","t","kg","g","mg","μg","Time","wk","d","h","s","updateUnitValues","e","unit","units","leftToRightConversion","rightToLeftConversion","setState","setErrors","errors","stringValue","target","value","trim","numberValue","Number","split","some","char","isNaN","replace","includes","getConversionFunctions","unitType","unit1","unit2","Object","keys","unit1Key","matchingUnit2Key","result","getFormula","Input","onChange","setUnitValues","useContext","UnitTypeContext","unitValues","currentErrors","entries","filter","_","hasValidInput","length","errorMessage","unitOptions","className","styles","input_container","input","input_error","error_message","updatedUnitValues","updatedErrors","updatedConversionFunctions","newUnit","isUpdatingUnit1","isUpdatingUnit2","hasSwappedUnits","values","error","updateUnit","select","map","dataUnit","dataLabel","Inputs","inputs_grid","equalSign","createContext","App","useState","setUnitType","defaultUnit1","defaultUnit2","useEffect","Provider","unit_converter_container","title","measurement_selector_input","unitTypeValue","formula_logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,yBAA2B,sCAAsC,MAAQ,mBAAmB,2BAA6B,wCAAwC,aAAe,4B,gBCAzND,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,MAAQ,qBAAqB,YAAc,2BAA2B,cAAgB,6BAA6B,OAAS,wB,iBCA/LD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,UAAY,4B,sHCC3DC,EAAY,CACvBC,OAAQ,CACNC,cAAe,CACbC,GAAI,YACJC,EAAG,QACHC,GAAI,aACJC,GAAI,aACJC,UAAI,cAENC,oBAAqB,CACnBL,GAAI,CACFC,EAAG,CACD,SAACK,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCJ,GAAI,CACF,SAACI,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCH,GAAI,CACF,SAACG,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCF,UAAI,CACF,SAACE,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAGnCL,EAAG,CACDC,GAAI,CACF,SAACI,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCH,GAAI,CACF,SAACG,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCF,UAAI,CACF,SAACE,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAGnCJ,GAAI,CACFC,GAAI,CACF,SAACG,GAAD,OAA+B,GAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,KAEjCF,UAAI,CACF,SAACE,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAGnCH,GAAI,CACFC,UAAI,CACF,SAACE,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,QAIrCC,SAAU,CACRP,GAAI,CACFC,EAAG,CACD,oCACA,mCAEFC,GAAI,CACF,sCACA,qCAEFC,GAAI,CACF,oCACA,mCAEFC,UAAI,CACF,oCACA,oCAGJH,EAAG,CACDC,GAAI,CACF,mCACA,kCAEFC,GAAI,CACF,oCACA,mCAEFC,UAAI,CACF,oCACA,oCAGJF,GAAI,CACFC,GAAI,CACF,kCACA,iCAEFC,UAAI,CACF,qCACA,qCAGJD,GAAI,CACFC,UAAI,CACF,oCACA,sCAKRI,KAAM,CACJT,cAAe,CACbU,EAAG,QACHC,GAAI,WACJC,EAAG,OACHC,GAAI,WACJC,UAAI,aAENR,oBAAqB,CACnBI,EAAG,CACDC,GAAI,CACF,SAACJ,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCK,EAAG,CACD,SAACL,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCM,GAAI,CACF,SAACN,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCO,UAAI,CACF,SAACP,GAAD,OAA+B,KAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,QAGnCI,GAAI,CACFC,EAAG,CACD,SAACL,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCM,GAAI,CACF,SAACN,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCO,UAAI,CACF,SAACP,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAGnCK,EAAG,CACDC,GAAI,CACF,SAACN,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCO,UAAI,CACF,SAACP,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAGnCM,GAAI,CACFC,UAAI,CACF,SAACP,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,QAIrCC,SAAU,CACRE,EAAG,CACDC,GAAI,CACF,kCACA,iCAEFC,EAAG,CAAC,kCAAmC,iCACvCC,GAAI,CACF,kCACA,iCAEFC,UAAI,CACF,mCACA,mCAGJH,GAAI,CACFC,EAAG,CAAC,kCAAmC,iCACvCC,GAAI,CACF,kCACA,iCAEFC,UAAI,CACF,kCACA,kCAGJF,EAAG,CACDC,GAAI,CACF,kCACA,iCAEFC,UAAI,CACF,kCACA,kCAGJD,GAAI,CACFC,UAAI,CACF,kCACA,oCAKRC,KAAM,CACJf,cAAe,CACbgB,GAAI,OACJC,EAAG,MACHC,EAAG,OACHhB,EAAG,SACHiB,EAAG,UAELb,oBAAqB,CACnBU,GAAI,CACFC,EAAG,CAAC,SAACV,GAAD,OAA+B,EAANA,GAAS,SAACA,GAAD,OAAyBA,EAAM,IACrEW,EAAG,CACD,SAACX,GAAD,OAA+B,IAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,MAEjCL,EAAG,CACD,SAACK,GAAD,OAA+B,MAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,QAEjCY,EAAG,CACD,SAACZ,GAAD,OAA+B,OAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,UAGnCU,EAAG,CACDC,EAAG,CACD,SAACX,GAAD,OAA+B,GAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,KAEjCL,EAAG,CACD,SAACK,GAAD,OAA+B,KAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAEjCY,EAAG,CACD,SAACZ,GAAD,OAA+B,MAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,SAGnCW,EAAG,CACDhB,EAAG,CACD,SAACK,GAAD,OAA+B,GAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,KAEjCY,EAAG,CACD,SAACZ,GAAD,OAA+B,KAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,QAGnCL,EAAG,CACDiB,EAAG,CACD,SAACZ,GAAD,OAA+B,GAANA,GACzB,SAACA,GAAD,OAAyBA,EAAM,OAIrCC,SAAU,CACRQ,GAAI,CACFC,EAAG,CAAC,+BAAgC,8BACpCC,EAAG,CAAC,iCAAkC,gCACtChB,EAAG,CACD,mCACA,kCAEFiB,EAAG,CACD,oCACA,oCAGJF,EAAG,CACDC,EAAG,CAAC,gCAAiC,+BACrChB,EAAG,CAAC,kCAAmC,iCACvCiB,EAAG,CACD,mCACA,mCAGJD,EAAG,CACDhB,EAAG,CAAC,gCAAiC,+BACrCiB,EAAG,CAAC,kCAAmC,kCAEzCjB,EAAG,CACDiB,EAAG,CAAC,gCAAiC,mC,gBCjRhCC,EAAmB,SAAC,GASK,IAAD,IAYjC,IAEuB,IAqBD,IAmBD,EA9DvBC,EAQmC,EARnCA,EACAC,EAOmC,EAPnCA,KACAC,EAMmC,EANnCA,MACAC,EAKmC,EALnCA,sBACAC,EAImC,EAJnCA,sBACAC,EAGmC,EAHnCA,SACAC,EAEmC,EAFnCA,UACAC,EACmC,EADnCA,OAEMC,EAAcR,EAAES,OAAOC,MAAMC,OAC7BC,EAAcC,OAAOL,GAE3B,OACEA,EACGM,MAAM,IACNC,MACC,SAACC,GAAD,MACY,MAATA,GAAgBC,MAAMJ,OAAOG,KAC9BR,EAAYU,QAAQ,IAAK,IAAIC,SAAS,QAIxClB,IAASC,EAAM,IACjBI,GAAS,mBACNJ,EAAM,GAAK,sCADL,cAENA,EAAM,GAAK,IAFL,IAIFG,GAAQ,mBACZH,EAAM,GAAKM,GADC,cAEZN,EAAM,GAAK,IAFC,MAMjBI,GAAS,mBACNJ,EAAM,GAAK,IADL,cAENA,EAAM,GAAK,sCAFL,IAIFG,GAAQ,mBACZH,EAAM,GAAK,IADC,cAEZA,EAAM,GAAKM,GAFC,KAMG,KAAhBA,GACGD,EAAON,MACVK,GAAS,mBACNJ,EAAM,GAAK,IADL,cAENA,EAAM,GAAK,IAFL,IAIJG,GAAQ,mBACZH,EAAM,GAAK,IADC,cAEZA,EAAM,GAAK,IAFC,MAMZK,EAAON,MACVK,GAAS,mBACNJ,EAAM,GAAK,IADL,cAENA,EAAM,GAAK,IAFL,IAMPD,IAASC,EAAM,GACVG,GAAQ,mBACZH,EAAM,GAAKM,EAAYW,SAAS,KAAOX,EAAcI,GADzC,cAEZV,EAAM,GAAqB,MAAhBM,EAAsB,GAAKL,EAAsBS,IAFhD,SAMjBP,GAAQ,mBACLH,EAAM,GAAqB,MAAhBM,EAAsB,GAAKJ,EAAsBQ,IADvD,cAELV,EAAM,GAAKM,EAAYW,SAAS,KAAOX,EAAcI,GAFhD,MAMGQ,EAAyB,SACpCC,EACAC,EACAC,GAKA,IAHA,IAGA,MAHkBC,OAAOC,KAAKhD,EAAK4C,GAAUpC,qBAG7C,eAKE,IALG,IAAIyC,EAAQ,KAKf,MAJwBF,OAAOC,KAC7BhD,EAAK4C,GAAUpC,oBAAoByC,IAGrC,eAAgD,CAA3C,IAAIC,EAAgB,KACvB,GAAIL,IAAUI,GAAYH,IAAUI,EAClC,OAAOlD,EAAK4C,GAAUpC,oBAAoBqC,GAAOC,GAC9C,GAAID,IAAUK,GAAoBJ,IAAUG,EAAU,CACzD,IAAME,EAASnD,EAAK4C,GAAUpC,oBAAoBsC,GAAOD,GACzD,MAAO,CAACM,EAAO,GAAIA,EAAO,KAOhC,MAAO,CAAC,SAAC1C,GAAD,OAAyBA,GAAK,SAACA,GAAD,OAAyBA,KAGpD2C,EAAa,SACxBR,EACAC,EACAC,GAKA,IAHA,IAGA,MAHkBC,OAAOC,KAAKhD,EAAK4C,GAAUlC,UAG7C,eAGE,IAHG,IAAIuC,EAAQ,KAGf,MAFwBF,OAAOC,KAAKhD,EAAK4C,GAAUlC,SAASuC,IAE5D,eAAgD,CAA3C,IAAIC,EAAgB,KACvB,GAAIL,IAAUI,GAAYH,IAAUI,EAClC,OAAOlD,EAAK4C,GAAUlC,SAASmC,GAAOC,GAAO,GAC1C,GAAID,IAAUK,GAAoBJ,IAAUG,EAC/C,OAAOjD,EAAK4C,GAAUlC,SAASoC,GAAOD,GAAO,GAOnD,MAAO,qB,uBC1EMQ,EApDD,SAAC,GAQK,IAPlBC,EAOiB,EAPjBA,SACArB,EAMiB,EANjBA,MACAT,EAKiB,EALjBA,KACAC,EAIiB,EAJjBA,MACAK,EAGiB,EAHjBA,OACAD,EAEiB,EAFjBA,UACA0B,EACiB,EADjBA,cAEA,EAAiCC,qBAAWC,GAApCb,EAAR,EAAQA,SAAUc,EAAlB,EAAkBA,WACZC,EAAgBZ,OAAOa,QAAQ9B,GAAQ+B,QAAO,SAACC,GAAD,OAAOA,EAAE,MACvDC,IAAkBJ,EAAcK,QAAUL,EAAc,GAAG,KAAOnC,GAClEyC,GAAgBF,GAAiBJ,EAAc,GAAG,GAClDO,EAAcnB,OAAOa,QAAQ5D,EAAK4C,GAAU1C,eAElD,OACE,sBAAKiE,UAAWC,IAAOC,gBAAvB,UACE,uBACE,cAAY,aACZf,SAAUA,EACVrB,MAAOA,EACPkC,UAAS,UAAKC,IAAOE,MAAZ,aAAsBP,GAAiBK,IAAOG,eAEzD,sBAAMJ,UAAWC,IAAOI,cAAxB,SAAwCP,IACxC,wBACE,cAAY,gBACZX,SAAU,SAAC/B,GAAD,ODkHa,SAAC,GASN,IACpBkD,EACAC,EACAC,EAUU,IAkBO,EAqBd,EA5DPpD,EAQuB,EARvBA,EACAC,EAOuB,EAPvBA,KACAC,EAMuB,EANvBA,MACAmB,EAKuB,EALvBA,SACAc,EAIuB,EAJvBA,WACAH,EAGuB,EAHvBA,cACAzB,EAEuB,EAFvBA,OACAD,EACuB,EADvBA,UAKM+C,EAAUrD,EAAES,OAAOC,MACnB4C,EAAkBrD,IAASC,EAAM,GACjCqD,EAAkBtD,IAASC,EAAM,GAEjCsD,EACHF,GAAmBD,IAAYnD,EAAM,IACrCqD,GAAmBF,IAAYnD,EAAM,GAGxC,GAFiBsB,OAAOiC,OAAOlD,GAAQQ,MAAK,SAAC2C,GAAD,OAAWA,KAgBrD,OAba,mBACVJ,EAAkBD,EAAU7B,OAAOC,KAAKlB,GAAQ,GAAK,IAD3C,cAEVgD,EAAkBF,EAAU7B,OAAOC,KAAKlB,GAAQ,GAAK,IAFxD4C,EAAa,EAII,mBACdG,EACGD,EACA7B,OAAOC,KAAKU,GAAYqB,EAAkB,EAAI,GAAK,GAHxC,cAIdD,EACGF,EACA7B,OAAOC,KAAKU,GAAYqB,EAAkB,EAAI,GAAK,GANzDN,EAAiB,EAQjB5C,EAAU6C,GACHnB,EAAckB,GAInBI,GACFF,EAA6BhC,EAC3BC,EACAgC,EACAnD,EAAMsD,EAAkB,EAAI,IAG1BA,IACFJ,EAA6B,CAC3BA,EAA2B,GAC3BA,EAA2B,KAGd,mBACdC,EADc,UACD7B,OAAOiC,OAAOtB,GAAY,KADzB,cAEdX,OAAOC,KAAKU,GAAYqB,EAAkB,EAAI,GAC7CJ,EAA2BI,EAAkB,EAAI,GAC/C3C,OAAOW,OAAOiC,OAAOtB,GAAY,MAJvCe,EAAiB,IASjBE,EAA6BhC,EAC3BC,EACAnB,EAAMsD,EAAkB,EAAI,GAC5BH,GAGe,mBACd7B,OAAOC,KAAKU,GAAYqB,EAAkB,EAAI,GAC7CJ,EAA2B,GAAGvC,OAAOW,OAAOiC,OAAOtB,GAAY,MAFlD,cAGdkB,EAHc,UAGD7B,OAAOiC,OAAOtB,GAAY,KAH1Ce,EAAiB,GAOnBlB,EAAckB,GC5LNS,CAAW,CACT3D,IACAC,OACAC,QACAmB,WACAc,aACAH,gBACAzB,SACAD,eAGJsC,UAAWC,IAAOe,OAClBlD,MAAOT,EAfT,SAiBG0C,EAAYkB,KAAI,mCAAEC,EAAF,KAAYC,EAAZ,YACf,wBAEErD,MAAOoD,EAFT,mBAGKC,IAHL,UACU1C,EADV,YACsB0C,EADtB,qB,gBCWKC,EAvDA,SAAC,GAOK,IANnB9D,EAMkB,EANlBA,MACAiC,EAKkB,EALlBA,WACAH,EAIkB,EAJlBA,cACAzB,EAGkB,EAHlBA,OACAD,EAEkB,EAFlBA,UACArB,EACkB,EADlBA,oBAEA,OACE,sBAAK2D,UAAWC,IAAOoB,YAAvB,UACE,cAAC,EAAD,CACElC,SAAU,SAAC/B,GAAD,OACRD,EAAiB,CACfC,IACAC,KAAMC,EAAM,GACZA,QACAC,sBAAuBlB,EAAoB,GAC3CmB,sBAAuBnB,EAAoB,GAC3CoB,SAAU2B,EACV1B,YACAC,YAGJG,MAAOc,OAAOiC,OAAOtB,GAAY,GACjClC,KAAMC,EAAM,GACZA,MAAOA,EACPK,OAAQA,EACRD,UAAWA,EACX0B,cAAeA,IAEjB,sBAAMY,UAAWC,IAAOqB,UAAxB,eACA,cAAC,EAAD,CACEnC,SAAU,SAAC/B,GACTD,EAAiB,CACfC,IACAC,KAAMC,EAAM,GACZA,QACAC,sBAAuBlB,EAAoB,GAC3CmB,sBAAuBnB,EAAoB,GAC3CoB,SAAU2B,EACV1B,YACAC,YAGJG,MAAOc,OAAOiC,OAAOtB,GAAY,GACjClC,KAAMC,EAAM,GACZA,MAAOA,EACPK,OAAQA,EACRD,UAAWA,EACX0B,cAAeA,QC/DVE,EAAkBiC,wBAAmB,MAiEnCC,MA/Df,WAAgB,IAAD,IACb,EAAgCC,mBJVH,UIU7B,mBAAOhD,EAAP,KAAiBiD,EAAjB,KACA,EAAqC,CACnC9C,OAAOC,KAAKhD,EAAK4C,GAAU1C,eAAe,GAC1C6C,OAAOC,KAAKhD,EAAK4C,GAAU1C,eAAe,IAFrC4F,EAAP,KAAqBC,EAArB,KAIA,EAAoCH,oBAAQ,mBACzCE,EAAe,GAD0B,cAEzCC,EAAe,GAF0B,IAA5C,mBAAOrC,EAAP,KAAmBH,EAAnB,KAKA,EAAuB,CACrBR,OAAOC,KAAKU,GAAY,GACxBX,OAAOC,KAAKU,GAAY,IAFnBb,EAAP,KAAcC,EAAd,KAKA,EAA4B8C,oBAAQ,mBACjCE,EAAe,IADkB,cAEjCC,EAAe,IAFkB,IAApC,mBAAOjE,EAAP,KAAeD,EAAf,KAWA,OANAmE,qBAAU,WAAO,IAAD,IACdzC,GAAa,mBAAIuC,EAAe,GAAnB,cAAuBC,EAAe,GAAtC,IACblE,GAAS,mBAAIiE,EAAe,IAAnB,cAAwBC,EAAe,IAAvC,MAER,CAACnD,IAGF,cAACa,EAAgBwC,SAAjB,CAA0BhE,MAAO,CAAEyB,aAAYd,YAA/C,SACE,qBAAKuB,UAAWC,IAAOuB,IAAvB,SACE,sBAAKxB,UAAWC,IAAO8B,yBAAvB,UACE,oBAAI/B,UAAWC,IAAO+B,MAAtB,4BACA,wBACE,cAAY,qBACZ7C,SAAU,SAAC/B,GACTsE,EAAYtE,EAAES,OAAOC,QAEvBkC,UAAWC,IAAOgC,2BALpB,SAOGrD,OAAOC,KAAKhD,GAAMoF,KAAI,SAACiB,GAAD,OACrB,wBAAwCpE,MAAOoE,EAA/C,SACGA,GADH,UAAgBA,EAAhB,iBAKJ,cAAC,EAAD,CACE5E,MAAO,CAACoB,EAAOC,GACfY,WAAYA,EACZH,cAAeA,EACfzB,OAAQA,EACRD,UAAWA,EACXrB,oBAAqBmC,EAAuBC,EAAUC,EAAOC,KAE/D,sBAAK,cAAY,UAAjB,UACE,sBAAMqB,UAAWC,IAAOkC,aAAxB,qBAAqD,IACpDlD,EAAWR,EAAUC,EAAOC,cClD1ByD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5caba243.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__28Xbt\",\"unit_converter_container\":\"App_unit_converter_container__U3xPV\",\"title\":\"App_title__3vcO-\",\"measurement_selector_input\":\"App_measurement_selector_input__2YwN-\",\"formula_logo\":\"App_formula_logo__2mKjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_container\":\"Input_input_container__2SJmF\",\"input\":\"Input_input__3fOsp\",\"input_error\":\"Input_input_error__j3G3d\",\"error_message\":\"Input_error_message__228tk\",\"select\":\"Input_select__2sEJJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs_grid\":\"Inputs_inputs_grid__Aaaxy\",\"equalSign\":\"Inputs_equalSign__xMdDv\"};","export const defaultUnitType = \"Length\";\n\nexport const data: any = {\n  Length: {\n    unitsToLabels: {\n      km: \"Kilometer\",\n      m: \"Meter\",\n      cm: \"Centimeter\",\n      mm: \"Millimeter\",\n      μm: \"Micrometer\",\n    },\n    conversionFunctions: {\n      km: {\n        m: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n        cm: [\n          (num: number): number => num * 100000,\n          (num: number): number => num / 100000,\n        ],\n        mm: [\n          (num: number): number => num * 1000000,\n          (num: number): number => num / 1000000,\n        ],\n        μm: [\n          (num: number): number => num * 1000000000,\n          (num: number): number => num / 1000000000,\n        ],\n      },\n      m: {\n        cm: [\n          (num: number): number => num * 100,\n          (num: number): number => num / 100,\n        ],\n        mm: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n        μm: [\n          (num: number): number => num * 1000000,\n          (num: number): number => num / 1000000,\n        ],\n      },\n      cm: {\n        mm: [\n          (num: number): number => num * 10,\n          (num: number): number => num / 10,\n        ],\n        μm: [\n          (num: number): number => num * 10000,\n          (num: number): number => num / 10000,\n        ],\n      },\n      mm: {\n        μm: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n      },\n    },\n    formulas: {\n      km: {\n        m: [\n          \"multiply the length value by 1000\",\n          \"divide the length value by 1000\",\n        ],\n        cm: [\n          \"multiply the length value by 100000\",\n          \"divide the length value by 100000\",\n        ],\n        mm: [\n          \"multiply the length value by 1e+6\",\n          \"divide the length value by 1e+6\",\n        ],\n        μm: [\n          \"multiply the length value by 1e+9\",\n          \"divide the length value by 1e+9\",\n        ],\n      },\n      m: {\n        cm: [\n          \"multiply the length value by 100\",\n          \"divide the length value by 100\",\n        ],\n        mm: [\n          \"multiply the length value by 1000\",\n          \"divide the length value by 1000\",\n        ],\n        μm: [\n          \"multiply the length value by 1e+6\",\n          \"divide the length value by 1e+6\",\n        ],\n      },\n      cm: {\n        mm: [\n          \"multiply the length value by 10\",\n          \"divide the length value by 10\",\n        ],\n        μm: [\n          \"multiply the length value by 10000\",\n          \"divide the length value by 10000\",\n        ],\n      },\n      mm: {\n        μm: [\n          \"multiply the length value by 1000\",\n          \"divide the length value by 1000\",\n        ],\n      },\n    },\n  },\n  Mass: {\n    unitsToLabels: {\n      t: \"Tonne\",\n      kg: \"Kilogram\",\n      g: \"Gram\",\n      mg: \"Miligram\",\n      μg: \"Microgram\",\n    },\n    conversionFunctions: {\n      t: {\n        kg: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n        g: [\n          (num: number): number => num * 1000000,\n          (num: number): number => num / 1000000,\n        ],\n        mg: [\n          (num: number): number => num * 1000000000,\n          (num: number): number => num / 1000000000,\n        ],\n        μg: [\n          (num: number): number => num * 1000000000000,\n          (num: number): number => num / 1000000000000,\n        ],\n      },\n      kg: {\n        g: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n        mg: [\n          (num: number): number => num * 1000000,\n          (num: number): number => num / 1000000,\n        ],\n        μg: [\n          (num: number): number => num * 1000000000,\n          (num: number): number => num / 1000000000,\n        ],\n      },\n      g: {\n        mg: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n        μg: [\n          (num: number): number => num * 1000000,\n          (num: number): number => num / 1000000,\n        ],\n      },\n      mg: {\n        μg: [\n          (num: number): number => num * 1000,\n          (num: number): number => num / 1000,\n        ],\n      },\n    },\n    formulas: {\n      t: {\n        kg: [\n          \"multiply the mass value by 1000\",\n          \"divide the mass value by 1000\",\n        ],\n        g: [\"multiply the mass value by 1e+6\", \"divide the mass value by 1e+6\"],\n        mg: [\n          \"multiply the mass value by 1e+9\",\n          \"divide the mass value by 1e+9\",\n        ],\n        μg: [\n          \"multiply the mass value by 1e+12\",\n          \"divide the mass value by 1e+12\",\n        ],\n      },\n      kg: {\n        g: [\"multiply the mass value by 1000\", \"divide the mass value by 1000\"],\n        mg: [\n          \"multiply the mass value by 1e+6\",\n          \"divide the mass value by 1e+6\",\n        ],\n        μg: [\n          \"multiply the mass value by 1e+9\",\n          \"divide the mass value by 1e+9\",\n        ],\n      },\n      g: {\n        mg: [\n          \"multiply the mass value by 1000\",\n          \"divide the mass value by 1000\",\n        ],\n        μg: [\n          \"multiply the mass value by 1e+6\",\n          \"divide the mass value by 1e+6\",\n        ],\n      },\n      mg: {\n        μg: [\n          \"multiply the mass value by 1000\",\n          \"divide the mass value by 1000\",\n        ],\n      },\n    },\n  },\n  Time: {\n    unitsToLabels: {\n      wk: \"Week\",\n      d: \"Day\",\n      h: \"Hour\",\n      m: \"Minute\",\n      s: \"Second\",\n    },\n    conversionFunctions: {\n      wk: {\n        d: [(num: number): number => num * 7, (num: number): number => num / 7],\n        h: [\n          (num: number): number => num * 168,\n          (num: number): number => num / 168,\n        ],\n        m: [\n          (num: number): number => num * 10080,\n          (num: number): number => num / 10080,\n        ],\n        s: [\n          (num: number): number => num * 604800,\n          (num: number): number => num / 604800,\n        ],\n      },\n      d: {\n        h: [\n          (num: number): number => num * 24,\n          (num: number): number => num / 24,\n        ],\n        m: [\n          (num: number): number => num * 1440,\n          (num: number): number => num / 1440,\n        ],\n        s: [\n          (num: number): number => num * 86400,\n          (num: number): number => num / 86400,\n        ],\n      },\n      h: {\n        m: [\n          (num: number): number => num * 60,\n          (num: number): number => num / 60,\n        ],\n        s: [\n          (num: number): number => num * 3600,\n          (num: number): number => num / 3600,\n        ],\n      },\n      m: {\n        s: [\n          (num: number): number => num * 60,\n          (num: number): number => num / 60,\n        ],\n      },\n    },\n    formulas: {\n      wk: {\n        d: [\"multiply the time value by 7\", \"divide the time value by 7\"],\n        h: [\"multiply the time value by 168\", \"divide the time value by 168\"],\n        m: [\n          \"multiply the time value by 10080\",\n          \"divide the time value by 10080\",\n        ],\n        s: [\n          \"multiply the time value by 604800\",\n          \"divide the time value by 604800\",\n        ],\n      },\n      d: {\n        h: [\"multiply the time value by 24\", \"divide the time value by 24\"],\n        m: [\"multiply the time value by 1440\", \"divide the time value by 1440\"],\n        s: [\n          \"multiply the time value by 86400\",\n          \"divide the time value by 86400\",\n        ],\n      },\n      h: {\n        m: [\"multiply the time value by 60\", \"divide the time value by 60\"],\n        s: [\"multiply the time value by 3600\", \"divide the time value by 3600\"],\n      },\n      m: {\n        s: [\"multiply the time value by 60\", \"divide the time value by 60\"],\n      },\n    },\n  },\n};\n","import {\n  TChangeEvent,\n  TConversionFunction,\n  TMapOfStrings,\n  TSetErrors,\n  TSetState,\n  TUnit,\n  TUnits,\n  TUnitType,\n} from \"../types/common\";\nimport { data } from \"./data\";\n\ninterface IUpdateUnitValuesParams {\n  e: TChangeEvent;\n  unit: TUnit;\n  units: TUnits;\n  leftToRightConversion: TConversionFunction;\n  rightToLeftConversion: TConversionFunction;\n  setState: TSetState;\n  setErrors: TSetErrors;\n  errors: TMapOfStrings;\n}\n\nexport const updateUnitValues = ({\n  e,\n  unit,\n  units,\n  leftToRightConversion,\n  rightToLeftConversion,\n  setState,\n  setErrors,\n  errors,\n}: IUpdateUnitValuesParams): void => {\n  const stringValue = e.target.value.trim();\n  const numberValue = Number(stringValue);\n  // Display error message if user types in a non-number, multiple dots or a space character.\n  if (\n    stringValue\n      .split(\"\")\n      .some(\n        (char) =>\n          (char !== \".\" && isNaN(Number(char))) ||\n          stringValue.replace(\".\", \"\").includes(\".\")\n      )\n  ) {\n    // If user typed into left input.\n    if (unit === units[0]) {\n      setErrors({\n        [units[0]]: \"Error: only valid numbers allowed.\",\n        [units[1]]: \"\",\n      });\n      return setState({\n        [units[0]]: stringValue,\n        [units[1]]: \"\",\n      });\n    }\n    // If user typed into right input.\n    setErrors({\n      [units[0]]: \"\",\n      [units[1]]: \"Error: only valid numbers allowed.\",\n    });\n    return setState({\n      [units[0]]: \"\",\n      [units[1]]: stringValue,\n    });\n  }\n  // Allow user to press delete/backspace button until input field is empty/blank.\n  if (stringValue === \"\") {\n    if (!errors.unit)\n      setErrors({\n        [units[0]]: \"\",\n        [units[1]]: \"\",\n      });\n    return setState({\n      [units[0]]: \"\",\n      [units[1]]: \"\",\n    });\n  }\n  // Remove error message when user types valid character (e.g. number or single '.').\n  if (!errors.unit)\n    setErrors({\n      [units[0]]: \"\",\n      [units[1]]: \"\",\n    });\n\n  // When user types into left input, display conversion on right input.\n  if (unit === units[0]) {\n    return setState({\n      [units[0]]: stringValue.includes(\".\") ? stringValue : numberValue,\n      [units[1]]: stringValue === \".\" ? \"\" : leftToRightConversion(numberValue),\n    });\n  }\n  // When user types into right input, display conversion on left input.\n  setState({\n    [units[0]]: stringValue === \".\" ? \"\" : rightToLeftConversion(numberValue),\n    [units[1]]: stringValue.includes(\".\") ? stringValue : numberValue,\n  });\n};\n\nexport const getConversionFunctions = (\n  unitType: TUnitType,\n  unit1: TUnit,\n  unit2: TUnit\n): [TConversionFunction, TConversionFunction] => {\n  const unit1Keys = Object.keys(data[unitType].conversionFunctions);\n  // Traditional for loop was chosen (over alternatives like forEach) so that the function is exited on\n  // execution of first return statement. This significantly improves performance as the entire data won't be parsed (most of the time).\n  for (let unit1Key of unit1Keys) {\n    let matchingUnit2Keys = Object.keys(\n      data[unitType].conversionFunctions[unit1Key]\n    );\n\n    for (let matchingUnit2Key of matchingUnit2Keys) {\n      if (unit1 === unit1Key && unit2 === matchingUnit2Key)\n        return data[unitType].conversionFunctions[unit1][unit2];\n      else if (unit1 === matchingUnit2Key && unit2 === unit1Key) {\n        const result = data[unitType].conversionFunctions[unit2][unit1];\n        return [result[1], result[0]];\n      }\n    }\n  }\n\n  /* I add this return line just to satisfy typescript's intense checking requirement.\n     If the data in src\\services\\data.ts is valid, this line should never be reached. */\n  return [(num: number): number => num, (num: number): number => num];\n};\n\nexport const getFormula = (\n  unitType: TUnitType,\n  unit1: TUnit,\n  unit2: TUnit\n): string => {\n  const unit1Keys = Object.keys(data[unitType].formulas);\n  // Traditional for loop was chosen (over alternatives like forEach) so that the function is exited on\n  // execution of first return statement. This significantly improves performance as the entire data won't be parsed (most of the time).\n  for (let unit1Key of unit1Keys) {\n    let matchingUnit2Keys = Object.keys(data[unitType].formulas[unit1Key]);\n\n    for (let matchingUnit2Key of matchingUnit2Keys) {\n      if (unit1 === unit1Key && unit2 === matchingUnit2Key)\n        return data[unitType].formulas[unit1][unit2][0];\n      else if (unit1 === matchingUnit2Key && unit2 === unit1Key) {\n        return data[unitType].formulas[unit2][unit1][1];\n      }\n    }\n  }\n\n  /* I add this return line just to satisfy typescript's intense checking requirement.\n    If the data in src\\services\\data.ts is valid, this line should never be reached. */\n  return \"formula not found\";\n};\n\ninterface IUpdateUnitParams {\n  e: any;\n  unitType: TUnitType;\n  unit: TUnit;\n  units: TUnits;\n  unitValues: TMapOfStrings;\n  setUnitValues: TSetState;\n  errors: TMapOfStrings;\n  setErrors: TSetErrors;\n}\n\nexport const updateUnit: any = ({\n  e,\n  unit,\n  units,\n  unitType,\n  unitValues,\n  setUnitValues,\n  errors,\n  setErrors,\n}: IUpdateUnitParams) => {\n  let updatedUnitValues;\n  let updatedErrors;\n  let updatedConversionFunctions;\n  const newUnit = e.target.value;\n  const isUpdatingUnit1 = unit === units[0];\n  const isUpdatingUnit2 = unit === units[1];\n\n  const hasSwappedUnits =\n    (isUpdatingUnit1 && newUnit === units[1]) ||\n    (isUpdatingUnit2 && newUnit === units[0]);\n  const hasError = Object.values(errors).some((error) => error);\n\n  if (hasError) {\n    updatedErrors = {\n      [isUpdatingUnit1 ? newUnit : Object.keys(errors)[0]]: \"\",\n      [isUpdatingUnit2 ? newUnit : Object.keys(errors)[1]]: \"\",\n    };\n    updatedUnitValues = {\n      [isUpdatingUnit1\n        ? newUnit\n        : Object.keys(unitValues)[hasSwappedUnits ? 1 : 0]]: 0,\n      [isUpdatingUnit2\n        ? newUnit\n        : Object.keys(unitValues)[hasSwappedUnits ? 0 : 1]]: 0,\n    };\n    setErrors(updatedErrors);\n    return setUnitValues(updatedUnitValues);\n  }\n\n  // When changing unit of 1st input.\n  if (isUpdatingUnit1) {\n    updatedConversionFunctions = getConversionFunctions(\n      unitType,\n      newUnit,\n      units[hasSwappedUnits ? 0 : 1]\n    );\n\n    if (hasSwappedUnits)\n      updatedConversionFunctions = [\n        updatedConversionFunctions[1],\n        updatedConversionFunctions[0],\n      ];\n\n    updatedUnitValues = {\n      [newUnit]: `${Object.values(unitValues)[0]}`,\n      [Object.keys(unitValues)[hasSwappedUnits ? 0 : 1]]:\n        updatedConversionFunctions[hasSwappedUnits ? 1 : 0](\n          Number(Object.values(unitValues)[0])\n        ),\n    };\n    // When changing unit of 2nd input.\n  } else {\n    updatedConversionFunctions = getConversionFunctions(\n      unitType,\n      units[hasSwappedUnits ? 1 : 0],\n      newUnit\n    );\n\n    updatedUnitValues = {\n      [Object.keys(unitValues)[hasSwappedUnits ? 1 : 0]]:\n        updatedConversionFunctions[1](Number(Object.values(unitValues)[1])),\n      [newUnit]: `${Object.values(unitValues)[1]}`,\n    };\n  }\n\n  setUnitValues(updatedUnitValues);\n};\n","import { useContext } from \"react\";\nimport { UnitTypeContext } from \"../../App\";\nimport { data } from \"../../services/data\";\nimport { updateUnit } from \"../../services/unitConversion\";\nimport {\n  TChangeEvent,\n  TMapOfStrings,\n  TSetErrors,\n  TSetState,\n  TUnit,\n  TUnits,\n} from \"../../types/common\";\nimport styles from \"./Input.module.scss\";\ninterface IInputProps {\n  onChange: (e: TChangeEvent) => void;\n  value: number | string;\n  unit: TUnit;\n  units: TUnits;\n  errors: TMapOfStrings;\n  setErrors: TSetErrors;\n  setUnitValues: TSetState;\n}\n\nconst Input = ({\n  onChange,\n  value,\n  unit,\n  units,\n  errors,\n  setErrors,\n  setUnitValues,\n}: IInputProps) => {\n  const { unitType, unitValues } = useContext(UnitTypeContext);\n  const currentErrors = Object.entries(errors).filter((_) => _[1]);\n  const hasValidInput = !(currentErrors.length && currentErrors[0][0] === unit);\n  const errorMessage = !hasValidInput && currentErrors[0][1];\n  const unitOptions = Object.entries(data[unitType].unitsToLabels);\n\n  return (\n    <div className={styles.input_container}>\n      <input\n        data-testid=\"unit-input\"\n        onChange={onChange}\n        value={value}\n        className={`${styles.input} ${!hasValidInput && styles.input_error}`}\n      />\n      <span className={styles.error_message}>{errorMessage}</span>\n      <select\n        data-testid=\"unit-selector\"\n        onChange={(e) =>\n          updateUnit({\n            e,\n            unit,\n            units,\n            unitType,\n            unitValues,\n            setUnitValues,\n            errors,\n            setErrors,\n          })\n        }\n        className={styles.select}\n        value={unit}\n      >\n        {unitOptions.map(([dataUnit, dataLabel]) => (\n          <option\n            key={`${unitType}_${dataLabel}_option`}\n            value={dataUnit}\n          >{`${dataLabel}`}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default Input;\n","import { updateUnitValues } from \"../../services/unitConversion\";\nimport {\n  TChangeEvent,\n  TMapOfStringOrNumbers,\n  TMapOfStrings,\n  TSetErrors,\n  TSetState,\n  TUnits,\n} from \"../../types/common\";\nimport { default as Unit1Input, default as Unit2Input } from \"../input/Input\";\nimport styles from \"./Inputs.module.scss\";\n\ninterface IInputsProps {\n  units: TUnits;\n  unitValues: TMapOfStringOrNumbers;\n  setUnitValues: TSetState;\n  errors: TMapOfStrings;\n  setErrors: TSetErrors;\n  conversionFunctions: [(num: number) => number, (num: number) => number];\n}\n\nconst Inputs = ({\n  units,\n  unitValues,\n  setUnitValues,\n  errors,\n  setErrors,\n  conversionFunctions,\n}: IInputsProps) => {\n  return (\n    <div className={styles.inputs_grid}>\n      <Unit1Input\n        onChange={(e: TChangeEvent) =>\n          updateUnitValues({\n            e,\n            unit: units[0],\n            units,\n            leftToRightConversion: conversionFunctions[0],\n            rightToLeftConversion: conversionFunctions[1],\n            setState: setUnitValues,\n            setErrors,\n            errors,\n          })\n        }\n        value={Object.values(unitValues)[0]}\n        unit={units[0]}\n        units={units}\n        errors={errors}\n        setErrors={setErrors}\n        setUnitValues={setUnitValues}\n      />\n      <span className={styles.equalSign}>=</span>\n      <Unit2Input\n        onChange={(e: TChangeEvent) => {\n          updateUnitValues({\n            e,\n            unit: units[1],\n            units,\n            leftToRightConversion: conversionFunctions[0],\n            rightToLeftConversion: conversionFunctions[1],\n            setState: setUnitValues,\n            setErrors,\n            errors,\n          });\n        }}\n        value={Object.values(unitValues)[1]}\n        unit={units[1]}\n        units={units}\n        errors={errors}\n        setErrors={setErrors}\n        setUnitValues={setUnitValues}\n      />\n    </div>\n  );\n};\n\nexport default Inputs;\n","import { createContext, useEffect, useState } from \"react\";\nimport { data, defaultUnitType } from \"../src/services/data\";\nimport styles from \"./App.module.scss\";\nimport Inputs from \"./components/inputs/Inputs\";\nimport { getConversionFunctions, getFormula } from \"./services/unitConversion\";\nimport { IMap } from \"./types/common\";\n\nexport const UnitTypeContext = createContext<any>(null);\n\nfunction App() {\n  const [unitType, setUnitType] = useState(defaultUnitType);\n  const [defaultUnit1, defaultUnit2] = [\n    Object.keys(data[unitType].unitsToLabels)[0],\n    Object.keys(data[unitType].unitsToLabels)[1],\n  ];\n  const [unitValues, setUnitValues] = useState<IMap<string | number>>({\n    [defaultUnit1]: 0,\n    [defaultUnit2]: 0,\n  });\n\n  const [unit1, unit2] = [\n    Object.keys(unitValues)[0],\n    Object.keys(unitValues)[1],\n  ];\n\n  const [errors, setErrors] = useState<IMap<string>>({\n    [defaultUnit1]: \"\",\n    [defaultUnit2]: \"\",\n  });\n\n  useEffect(() => {\n    setUnitValues({ [defaultUnit1]: 0, [defaultUnit2]: 0 });\n    setErrors({ [defaultUnit1]: \"\", [defaultUnit2]: \"\" });\n    // eslint-disable-next-line\n  }, [unitType]);\n\n  return (\n    <UnitTypeContext.Provider value={{ unitValues, unitType }}>\n      <div className={styles.App}>\n        <div className={styles.unit_converter_container}>\n          <h1 className={styles.title}>Unit Converter</h1>\n          <select\n            data-testid=\"unit-type-selector\"\n            onChange={(e) => {\n              setUnitType(e.target.value);\n            }}\n            className={styles.measurement_selector_input}\n          >\n            {Object.keys(data).map((unitTypeValue) => (\n              <option key={`${unitTypeValue}_option`} value={unitTypeValue}>\n                {unitTypeValue}\n              </option>\n            ))}\n          </select>\n          <Inputs\n            units={[unit1, unit2]}\n            unitValues={unitValues}\n            setUnitValues={setUnitValues}\n            errors={errors}\n            setErrors={setErrors}\n            conversionFunctions={getConversionFunctions(unitType, unit1, unit2)}\n          />\n          <div data-testid=\"formula\">\n            <span className={styles.formula_logo}>Formula</span>{\" \"}\n            {getFormula(unitType, unit1, unit2)}\n          </div>\n        </div>\n      </div>\n    </UnitTypeContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}